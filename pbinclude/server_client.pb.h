// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5fclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_5fclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5fclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5fclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fclient_2eproto;
namespace PB {
namespace Server_Client {
class FindRet;
struct FindRetDefaultTypeInternal;
extern FindRetDefaultTypeInternal _FindRet_default_instance_;
class LoginRet;
struct LoginRetDefaultTypeInternal;
extern LoginRetDefaultTypeInternal _LoginRet_default_instance_;
class LogoutRet;
struct LogoutRetDefaultTypeInternal;
extern LogoutRetDefaultTypeInternal _LogoutRet_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace Server_Client
}  // namespace PB
PROTOBUF_NAMESPACE_OPEN
template<> ::PB::Server_Client::FindRet* Arena::CreateMaybeMessage<::PB::Server_Client::FindRet>(Arena*);
template<> ::PB::Server_Client::LoginRet* Arena::CreateMaybeMessage<::PB::Server_Client::LoginRet>(Arena*);
template<> ::PB::Server_Client::LogoutRet* Arena::CreateMaybeMessage<::PB::Server_Client::LogoutRet>(Arena*);
template<> ::PB::Server_Client::User* Arena::CreateMaybeMessage<::PB::Server_Client::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PB {
namespace Server_Client {

enum LoginRet_MsgId : int {
  LoginRet_MsgId_PROTO3 = 0,
  LoginRet_MsgId_Id = 2500011,
  LoginRet_MsgId_LoginRet_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LoginRet_MsgId_LoginRet_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LoginRet_MsgId_IsValid(int value);
constexpr LoginRet_MsgId LoginRet_MsgId_MsgId_MIN = LoginRet_MsgId_PROTO3;
constexpr LoginRet_MsgId LoginRet_MsgId_MsgId_MAX = LoginRet_MsgId_Id;
constexpr int LoginRet_MsgId_MsgId_ARRAYSIZE = LoginRet_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginRet_MsgId_descriptor();
template<typename T>
inline const std::string& LoginRet_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginRet_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginRet_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginRet_MsgId_descriptor(), enum_t_value);
}
inline bool LoginRet_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginRet_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginRet_MsgId>(
    LoginRet_MsgId_descriptor(), name, value);
}
enum LogoutRet_MsgId : int {
  LogoutRet_MsgId_PROTO3 = 0,
  LogoutRet_MsgId_Id = 2500012,
  LogoutRet_MsgId_LogoutRet_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LogoutRet_MsgId_LogoutRet_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LogoutRet_MsgId_IsValid(int value);
constexpr LogoutRet_MsgId LogoutRet_MsgId_MsgId_MIN = LogoutRet_MsgId_PROTO3;
constexpr LogoutRet_MsgId LogoutRet_MsgId_MsgId_MAX = LogoutRet_MsgId_Id;
constexpr int LogoutRet_MsgId_MsgId_ARRAYSIZE = LogoutRet_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogoutRet_MsgId_descriptor();
template<typename T>
inline const std::string& LogoutRet_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogoutRet_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogoutRet_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogoutRet_MsgId_descriptor(), enum_t_value);
}
inline bool LogoutRet_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogoutRet_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogoutRet_MsgId>(
    LogoutRet_MsgId_descriptor(), name, value);
}
enum FindRet_MsgId : int {
  FindRet_MsgId_PROTO3 = 0,
  FindRet_MsgId_Id = 2500013,
  FindRet_MsgId_FindRet_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FindRet_MsgId_FindRet_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FindRet_MsgId_IsValid(int value);
constexpr FindRet_MsgId FindRet_MsgId_MsgId_MIN = FindRet_MsgId_PROTO3;
constexpr FindRet_MsgId FindRet_MsgId_MsgId_MAX = FindRet_MsgId_Id;
constexpr int FindRet_MsgId_MsgId_ARRAYSIZE = FindRet_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FindRet_MsgId_descriptor();
template<typename T>
inline const std::string& FindRet_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FindRet_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FindRet_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FindRet_MsgId_descriptor(), enum_t_value);
}
inline bool FindRet_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FindRet_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FindRet_MsgId>(
    FindRet_MsgId_descriptor(), name, value);
}
// ===================================================================

class LoginRet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PB.Server_Client.LoginRet) */ {
 public:
  inline LoginRet() : LoginRet(nullptr) {}
  ~LoginRet() override;
  explicit constexpr LoginRet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRet(const LoginRet& from);
  LoginRet(LoginRet&& from) noexcept
    : LoginRet() {
    *this = ::std::move(from);
  }

  inline LoginRet& operator=(const LoginRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRet& operator=(LoginRet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRet& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRet* internal_default_instance() {
    return reinterpret_cast<const LoginRet*>(
               &_LoginRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginRet& a, LoginRet& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginRet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PB.Server_Client.LoginRet";
  }
  protected:
  explicit LoginRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoginRet_MsgId MsgId;
  static constexpr MsgId PROTO3 =
    LoginRet_MsgId_PROTO3;
  static constexpr MsgId Id =
    LoginRet_MsgId_Id;
  static inline bool MsgId_IsValid(int value) {
    return LoginRet_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    LoginRet_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    LoginRet_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    LoginRet_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return LoginRet_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return LoginRet_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return LoginRet_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kUseNameFieldNumber = 4,
    kTypeFieldNumber = 1,
    kMoneyFieldNumber = 3,
    kTokenIntFieldNumber = 5,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string useName = 4;
  void clear_usename();
  const std::string& usename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usename();
  PROTOBUF_NODISCARD std::string* release_usename();
  void set_allocated_usename(std::string* usename);
  private:
  const std::string& _internal_usename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usename(const std::string& value);
  std::string* _internal_mutable_usename();
  public:

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 money = 3;
  void clear_money();
  int32_t money() const;
  void set_money(int32_t value);
  private:
  int32_t _internal_money() const;
  void _internal_set_money(int32_t value);
  public:

  // int32 tokenInt = 5;
  void clear_tokenint();
  int32_t tokenint() const;
  void set_tokenint(int32_t value);
  private:
  int32_t _internal_tokenint() const;
  void _internal_set_tokenint(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PB.Server_Client.LoginRet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usename_;
  int32_t type_;
  int32_t money_;
  int32_t tokenint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fclient_2eproto;
};
// -------------------------------------------------------------------

class LogoutRet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PB.Server_Client.LogoutRet) */ {
 public:
  inline LogoutRet() : LogoutRet(nullptr) {}
  ~LogoutRet() override;
  explicit constexpr LogoutRet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogoutRet(const LogoutRet& from);
  LogoutRet(LogoutRet&& from) noexcept
    : LogoutRet() {
    *this = ::std::move(from);
  }

  inline LogoutRet& operator=(const LogoutRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutRet& operator=(LogoutRet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogoutRet& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogoutRet* internal_default_instance() {
    return reinterpret_cast<const LogoutRet*>(
               &_LogoutRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogoutRet& a, LogoutRet& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutRet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogoutRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogoutRet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogoutRet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogoutRet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PB.Server_Client.LogoutRet";
  }
  protected:
  explicit LogoutRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogoutRet_MsgId MsgId;
  static constexpr MsgId PROTO3 =
    LogoutRet_MsgId_PROTO3;
  static constexpr MsgId Id =
    LogoutRet_MsgId_Id;
  static inline bool MsgId_IsValid(int value) {
    return LogoutRet_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    LogoutRet_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    LogoutRet_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    LogoutRet_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return LogoutRet_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return LogoutRet_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return LogoutRet_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PB.Server_Client.LogoutRet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fclient_2eproto;
};
// -------------------------------------------------------------------

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PB.Server_Client.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit constexpr User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PB.Server_Client.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLvIDFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 lvID = 2;
  void clear_lvid();
  int32_t lvid() const;
  void set_lvid(int32_t value);
  private:
  int32_t _internal_lvid() const;
  void _internal_set_lvid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PB.Server_Client.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t lvid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fclient_2eproto;
};
// -------------------------------------------------------------------

class FindRet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PB.Server_Client.FindRet) */ {
 public:
  inline FindRet() : FindRet(nullptr) {}
  ~FindRet() override;
  explicit constexpr FindRet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindRet(const FindRet& from);
  FindRet(FindRet&& from) noexcept
    : FindRet() {
    *this = ::std::move(from);
  }

  inline FindRet& operator=(const FindRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindRet& operator=(FindRet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindRet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindRet* internal_default_instance() {
    return reinterpret_cast<const FindRet*>(
               &_FindRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FindRet& a, FindRet& b) {
    a.Swap(&b);
  }
  inline void Swap(FindRet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindRet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindRet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FindRet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindRet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PB.Server_Client.FindRet";
  }
  protected:
  explicit FindRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FindRet_MsgId MsgId;
  static constexpr MsgId PROTO3 =
    FindRet_MsgId_PROTO3;
  static constexpr MsgId Id =
    FindRet_MsgId_Id;
  static inline bool MsgId_IsValid(int value) {
    return FindRet_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    FindRet_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    FindRet_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    FindRet_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return FindRet_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return FindRet_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return FindRet_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserlistFieldNumber = 1,
  };
  // repeated .PB.Server_Client.User Userlist = 1;
  int userlist_size() const;
  private:
  int _internal_userlist_size() const;
  public:
  void clear_userlist();
  ::PB::Server_Client::User* mutable_userlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PB::Server_Client::User >*
      mutable_userlist();
  private:
  const ::PB::Server_Client::User& _internal_userlist(int index) const;
  ::PB::Server_Client::User* _internal_add_userlist();
  public:
  const ::PB::Server_Client::User& userlist(int index) const;
  ::PB::Server_Client::User* add_userlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PB::Server_Client::User >&
      userlist() const;

  // @@protoc_insertion_point(class_scope:PB.Server_Client.FindRet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PB::Server_Client::User > userlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fclient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRet

// int32 type = 1;
inline void LoginRet::clear_type() {
  type_ = 0;
}
inline int32_t LoginRet::_internal_type() const {
  return type_;
}
inline int32_t LoginRet::type() const {
  // @@protoc_insertion_point(field_get:PB.Server_Client.LoginRet.type)
  return _internal_type();
}
inline void LoginRet::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void LoginRet::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PB.Server_Client.LoginRet.type)
}

// string token = 2;
inline void LoginRet::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& LoginRet::token() const {
  // @@protoc_insertion_point(field_get:PB.Server_Client.LoginRet.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRet::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PB.Server_Client.LoginRet.token)
}
inline std::string* LoginRet::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:PB.Server_Client.LoginRet.token)
  return _s;
}
inline const std::string& LoginRet::_internal_token() const {
  return token_.Get();
}
inline void LoginRet::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginRet::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginRet::release_token() {
  // @@protoc_insertion_point(field_release:PB.Server_Client.LoginRet.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginRet::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PB.Server_Client.LoginRet.token)
}

// int32 tokenInt = 5;
inline void LoginRet::clear_tokenint() {
  tokenint_ = 0;
}
inline int32_t LoginRet::_internal_tokenint() const {
  return tokenint_;
}
inline int32_t LoginRet::tokenint() const {
  // @@protoc_insertion_point(field_get:PB.Server_Client.LoginRet.tokenInt)
  return _internal_tokenint();
}
inline void LoginRet::_internal_set_tokenint(int32_t value) {
  
  tokenint_ = value;
}
inline void LoginRet::set_tokenint(int32_t value) {
  _internal_set_tokenint(value);
  // @@protoc_insertion_point(field_set:PB.Server_Client.LoginRet.tokenInt)
}

// int32 money = 3;
inline void LoginRet::clear_money() {
  money_ = 0;
}
inline int32_t LoginRet::_internal_money() const {
  return money_;
}
inline int32_t LoginRet::money() const {
  // @@protoc_insertion_point(field_get:PB.Server_Client.LoginRet.money)
  return _internal_money();
}
inline void LoginRet::_internal_set_money(int32_t value) {
  
  money_ = value;
}
inline void LoginRet::set_money(int32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:PB.Server_Client.LoginRet.money)
}

// string useName = 4;
inline void LoginRet::clear_usename() {
  usename_.ClearToEmpty();
}
inline const std::string& LoginRet::usename() const {
  // @@protoc_insertion_point(field_get:PB.Server_Client.LoginRet.useName)
  return _internal_usename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRet::set_usename(ArgT0&& arg0, ArgT... args) {
 
 usename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PB.Server_Client.LoginRet.useName)
}
inline std::string* LoginRet::mutable_usename() {
  std::string* _s = _internal_mutable_usename();
  // @@protoc_insertion_point(field_mutable:PB.Server_Client.LoginRet.useName)
  return _s;
}
inline const std::string& LoginRet::_internal_usename() const {
  return usename_.Get();
}
inline void LoginRet::_internal_set_usename(const std::string& value) {
  
  usename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginRet::_internal_mutable_usename() {
  
  return usename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginRet::release_usename() {
  // @@protoc_insertion_point(field_release:PB.Server_Client.LoginRet.useName)
  return usename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginRet::set_allocated_usename(std::string* usename) {
  if (usename != nullptr) {
    
  } else {
    
  }
  usename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (usename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    usename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PB.Server_Client.LoginRet.useName)
}

// -------------------------------------------------------------------

// LogoutRet

// int32 type = 1;
inline void LogoutRet::clear_type() {
  type_ = 0;
}
inline int32_t LogoutRet::_internal_type() const {
  return type_;
}
inline int32_t LogoutRet::type() const {
  // @@protoc_insertion_point(field_get:PB.Server_Client.LogoutRet.type)
  return _internal_type();
}
inline void LogoutRet::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void LogoutRet::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PB.Server_Client.LogoutRet.type)
}

// -------------------------------------------------------------------

// User

// string name = 1;
inline void User::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:PB.Server_Client.User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PB.Server_Client.User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PB.Server_Client.User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:PB.Server_Client.User.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PB.Server_Client.User.name)
}

// int32 lvID = 2;
inline void User::clear_lvid() {
  lvid_ = 0;
}
inline int32_t User::_internal_lvid() const {
  return lvid_;
}
inline int32_t User::lvid() const {
  // @@protoc_insertion_point(field_get:PB.Server_Client.User.lvID)
  return _internal_lvid();
}
inline void User::_internal_set_lvid(int32_t value) {
  
  lvid_ = value;
}
inline void User::set_lvid(int32_t value) {
  _internal_set_lvid(value);
  // @@protoc_insertion_point(field_set:PB.Server_Client.User.lvID)
}

// -------------------------------------------------------------------

// FindRet

// repeated .PB.Server_Client.User Userlist = 1;
inline int FindRet::_internal_userlist_size() const {
  return userlist_.size();
}
inline int FindRet::userlist_size() const {
  return _internal_userlist_size();
}
inline void FindRet::clear_userlist() {
  userlist_.Clear();
}
inline ::PB::Server_Client::User* FindRet::mutable_userlist(int index) {
  // @@protoc_insertion_point(field_mutable:PB.Server_Client.FindRet.Userlist)
  return userlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PB::Server_Client::User >*
FindRet::mutable_userlist() {
  // @@protoc_insertion_point(field_mutable_list:PB.Server_Client.FindRet.Userlist)
  return &userlist_;
}
inline const ::PB::Server_Client::User& FindRet::_internal_userlist(int index) const {
  return userlist_.Get(index);
}
inline const ::PB::Server_Client::User& FindRet::userlist(int index) const {
  // @@protoc_insertion_point(field_get:PB.Server_Client.FindRet.Userlist)
  return _internal_userlist(index);
}
inline ::PB::Server_Client::User* FindRet::_internal_add_userlist() {
  return userlist_.Add();
}
inline ::PB::Server_Client::User* FindRet::add_userlist() {
  ::PB::Server_Client::User* _add = _internal_add_userlist();
  // @@protoc_insertion_point(field_add:PB.Server_Client.FindRet.Userlist)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PB::Server_Client::User >&
FindRet::userlist() const {
  // @@protoc_insertion_point(field_list:PB.Server_Client.FindRet.Userlist)
  return userlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Server_Client
}  // namespace PB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PB::Server_Client::LoginRet_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::Server_Client::LoginRet_MsgId>() {
  return ::PB::Server_Client::LoginRet_MsgId_descriptor();
}
template <> struct is_proto_enum< ::PB::Server_Client::LogoutRet_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::Server_Client::LogoutRet_MsgId>() {
  return ::PB::Server_Client::LogoutRet_MsgId_descriptor();
}
template <> struct is_proto_enum< ::PB::Server_Client::FindRet_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::Server_Client::FindRet_MsgId>() {
  return ::PB::Server_Client::FindRet_MsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_5fclient_2eproto
