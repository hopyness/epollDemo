// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fserver_2eproto;
namespace PB {
namespace Client_Server {
class FindAll;
struct FindAllDefaultTypeInternal;
extern FindAllDefaultTypeInternal _FindAll_default_instance_;
class FindList;
struct FindListDefaultTypeInternal;
extern FindListDefaultTypeInternal _FindList_default_instance_;
class Login;
struct LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class Logout;
struct LogoutDefaultTypeInternal;
extern LogoutDefaultTypeInternal _Logout_default_instance_;
}  // namespace Client_Server
}  // namespace PB
PROTOBUF_NAMESPACE_OPEN
template<> ::PB::Client_Server::FindAll* Arena::CreateMaybeMessage<::PB::Client_Server::FindAll>(Arena*);
template<> ::PB::Client_Server::FindList* Arena::CreateMaybeMessage<::PB::Client_Server::FindList>(Arena*);
template<> ::PB::Client_Server::Login* Arena::CreateMaybeMessage<::PB::Client_Server::Login>(Arena*);
template<> ::PB::Client_Server::Logout* Arena::CreateMaybeMessage<::PB::Client_Server::Logout>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PB {
namespace Client_Server {

enum Login_MsgId : int {
  Login_MsgId_PROTO3 = 0,
  Login_MsgId_Id = 2500001,
  Login_MsgId_Login_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Login_MsgId_Login_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Login_MsgId_IsValid(int value);
constexpr Login_MsgId Login_MsgId_MsgId_MIN = Login_MsgId_PROTO3;
constexpr Login_MsgId Login_MsgId_MsgId_MAX = Login_MsgId_Id;
constexpr int Login_MsgId_MsgId_ARRAYSIZE = Login_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Login_MsgId_descriptor();
template<typename T>
inline const std::string& Login_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Login_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Login_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Login_MsgId_descriptor(), enum_t_value);
}
inline bool Login_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Login_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Login_MsgId>(
    Login_MsgId_descriptor(), name, value);
}
enum Logout_MsgId : int {
  Logout_MsgId_PROTO3 = 0,
  Logout_MsgId_Id = 2500002,
  Logout_MsgId_Logout_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Logout_MsgId_Logout_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Logout_MsgId_IsValid(int value);
constexpr Logout_MsgId Logout_MsgId_MsgId_MIN = Logout_MsgId_PROTO3;
constexpr Logout_MsgId Logout_MsgId_MsgId_MAX = Logout_MsgId_Id;
constexpr int Logout_MsgId_MsgId_ARRAYSIZE = Logout_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Logout_MsgId_descriptor();
template<typename T>
inline const std::string& Logout_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Logout_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Logout_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Logout_MsgId_descriptor(), enum_t_value);
}
inline bool Logout_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Logout_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Logout_MsgId>(
    Logout_MsgId_descriptor(), name, value);
}
enum FindAll_MsgId : int {
  FindAll_MsgId_PROTO3 = 0,
  FindAll_MsgId_Id = 2500003,
  FindAll_MsgId_FindAll_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FindAll_MsgId_FindAll_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FindAll_MsgId_IsValid(int value);
constexpr FindAll_MsgId FindAll_MsgId_MsgId_MIN = FindAll_MsgId_PROTO3;
constexpr FindAll_MsgId FindAll_MsgId_MsgId_MAX = FindAll_MsgId_Id;
constexpr int FindAll_MsgId_MsgId_ARRAYSIZE = FindAll_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FindAll_MsgId_descriptor();
template<typename T>
inline const std::string& FindAll_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FindAll_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FindAll_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FindAll_MsgId_descriptor(), enum_t_value);
}
inline bool FindAll_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FindAll_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FindAll_MsgId>(
    FindAll_MsgId_descriptor(), name, value);
}
enum FindList_MsgId : int {
  FindList_MsgId_PROTO3 = 0,
  FindList_MsgId_Id = 2500004,
  FindList_MsgId_FindList_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FindList_MsgId_FindList_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FindList_MsgId_IsValid(int value);
constexpr FindList_MsgId FindList_MsgId_MsgId_MIN = FindList_MsgId_PROTO3;
constexpr FindList_MsgId FindList_MsgId_MsgId_MAX = FindList_MsgId_Id;
constexpr int FindList_MsgId_MsgId_ARRAYSIZE = FindList_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FindList_MsgId_descriptor();
template<typename T>
inline const std::string& FindList_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FindList_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FindList_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FindList_MsgId_descriptor(), enum_t_value);
}
inline bool FindList_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FindList_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FindList_MsgId>(
    FindList_MsgId_descriptor(), name, value);
}
// ===================================================================

class Login final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PB.Client_Server.Login) */ {
 public:
  inline Login() : Login(nullptr) {}
  ~Login() override;
  explicit constexpr Login(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login(const Login& from);
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login& operator=(Login&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }
  inline void Swap(Login* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Login& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Login& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PB.Client_Server.Login";
  }
  protected:
  explicit Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Login_MsgId MsgId;
  static constexpr MsgId PROTO3 =
    Login_MsgId_PROTO3;
  static constexpr MsgId Id =
    Login_MsgId_Id;
  static inline bool MsgId_IsValid(int value) {
    return Login_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    Login_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    Login_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    Login_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return Login_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return Login_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return Login_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUnameFieldNumber = 1,
    kPwdFieldNumber = 2,
  };
  // string uname = 1;
  void clear_uname();
  const std::string& uname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uname();
  PROTOBUF_NODISCARD std::string* release_uname();
  void set_allocated_uname(std::string* uname);
  private:
  const std::string& _internal_uname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uname(const std::string& value);
  std::string* _internal_mutable_uname();
  public:

  // string pwd = 2;
  void clear_pwd();
  const std::string& pwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pwd();
  PROTOBUF_NODISCARD std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // @@protoc_insertion_point(class_scope:PB.Client_Server.Login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Logout final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PB.Client_Server.Logout) */ {
 public:
  inline Logout() : Logout(nullptr) {}
  explicit constexpr Logout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Logout(const Logout& from);
  Logout(Logout&& from) noexcept
    : Logout() {
    *this = ::std::move(from);
  }

  inline Logout& operator=(const Logout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logout& operator=(Logout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Logout& default_instance() {
    return *internal_default_instance();
  }
  static inline const Logout* internal_default_instance() {
    return reinterpret_cast<const Logout*>(
               &_Logout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Logout& a, Logout& b) {
    a.Swap(&b);
  }
  inline void Swap(Logout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Logout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Logout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Logout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Logout& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Logout& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PB.Client_Server.Logout";
  }
  protected:
  explicit Logout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Logout_MsgId MsgId;
  static constexpr MsgId PROTO3 =
    Logout_MsgId_PROTO3;
  static constexpr MsgId Id =
    Logout_MsgId_Id;
  static inline bool MsgId_IsValid(int value) {
    return Logout_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    Logout_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    Logout_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    Logout_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return Logout_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return Logout_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return Logout_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PB.Client_Server.Logout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class FindAll final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PB.Client_Server.FindAll) */ {
 public:
  inline FindAll() : FindAll(nullptr) {}
  explicit constexpr FindAll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindAll(const FindAll& from);
  FindAll(FindAll&& from) noexcept
    : FindAll() {
    *this = ::std::move(from);
  }

  inline FindAll& operator=(const FindAll& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindAll& operator=(FindAll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindAll& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindAll* internal_default_instance() {
    return reinterpret_cast<const FindAll*>(
               &_FindAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FindAll& a, FindAll& b) {
    a.Swap(&b);
  }
  inline void Swap(FindAll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindAll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindAll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindAll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FindAll& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FindAll& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PB.Client_Server.FindAll";
  }
  protected:
  explicit FindAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FindAll_MsgId MsgId;
  static constexpr MsgId PROTO3 =
    FindAll_MsgId_PROTO3;
  static constexpr MsgId Id =
    FindAll_MsgId_Id;
  static inline bool MsgId_IsValid(int value) {
    return FindAll_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    FindAll_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    FindAll_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    FindAll_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return FindAll_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return FindAll_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return FindAll_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PB.Client_Server.FindAll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class FindList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PB.Client_Server.FindList) */ {
 public:
  inline FindList() : FindList(nullptr) {}
  ~FindList() override;
  explicit constexpr FindList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindList(const FindList& from);
  FindList(FindList&& from) noexcept
    : FindList() {
    *this = ::std::move(from);
  }

  inline FindList& operator=(const FindList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindList& operator=(FindList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindList& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindList* internal_default_instance() {
    return reinterpret_cast<const FindList*>(
               &_FindList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FindList& a, FindList& b) {
    a.Swap(&b);
  }
  inline void Swap(FindList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FindList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PB.Client_Server.FindList";
  }
  protected:
  explicit FindList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FindList_MsgId MsgId;
  static constexpr MsgId PROTO3 =
    FindList_MsgId_PROTO3;
  static constexpr MsgId Id =
    FindList_MsgId_Id;
  static inline bool MsgId_IsValid(int value) {
    return FindList_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    FindList_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    FindList_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    FindList_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return FindList_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return FindList_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return FindList_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kListIdFieldNumber = 1,
  };
  // repeated int32 listId = 1;
  int listid_size() const;
  private:
  int _internal_listid_size() const;
  public:
  void clear_listid();
  private:
  int32_t _internal_listid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_listid() const;
  void _internal_add_listid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_listid();
  public:
  int32_t listid(int index) const;
  void set_listid(int index, int32_t value);
  void add_listid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      listid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_listid();

  // @@protoc_insertion_point(class_scope:PB.Client_Server.FindList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > listid_;
  mutable std::atomic<int> _listid_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login

// string uname = 1;
inline void Login::clear_uname() {
  uname_.ClearToEmpty();
}
inline const std::string& Login::uname() const {
  // @@protoc_insertion_point(field_get:PB.Client_Server.Login.uname)
  return _internal_uname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login::set_uname(ArgT0&& arg0, ArgT... args) {
 
 uname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PB.Client_Server.Login.uname)
}
inline std::string* Login::mutable_uname() {
  std::string* _s = _internal_mutable_uname();
  // @@protoc_insertion_point(field_mutable:PB.Client_Server.Login.uname)
  return _s;
}
inline const std::string& Login::_internal_uname() const {
  return uname_.Get();
}
inline void Login::_internal_set_uname(const std::string& value) {
  
  uname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Login::_internal_mutable_uname() {
  
  return uname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Login::release_uname() {
  // @@protoc_insertion_point(field_release:PB.Client_Server.Login.uname)
  return uname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Login::set_allocated_uname(std::string* uname) {
  if (uname != nullptr) {
    
  } else {
    
  }
  uname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PB.Client_Server.Login.uname)
}

// string pwd = 2;
inline void Login::clear_pwd() {
  pwd_.ClearToEmpty();
}
inline const std::string& Login::pwd() const {
  // @@protoc_insertion_point(field_get:PB.Client_Server.Login.pwd)
  return _internal_pwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login::set_pwd(ArgT0&& arg0, ArgT... args) {
 
 pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PB.Client_Server.Login.pwd)
}
inline std::string* Login::mutable_pwd() {
  std::string* _s = _internal_mutable_pwd();
  // @@protoc_insertion_point(field_mutable:PB.Client_Server.Login.pwd)
  return _s;
}
inline const std::string& Login::_internal_pwd() const {
  return pwd_.Get();
}
inline void Login::_internal_set_pwd(const std::string& value) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Login::_internal_mutable_pwd() {
  
  return pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Login::release_pwd() {
  // @@protoc_insertion_point(field_release:PB.Client_Server.Login.pwd)
  return pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Login::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pwd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PB.Client_Server.Login.pwd)
}

// -------------------------------------------------------------------

// Logout

// -------------------------------------------------------------------

// FindAll

// -------------------------------------------------------------------

// FindList

// repeated int32 listId = 1;
inline int FindList::_internal_listid_size() const {
  return listid_.size();
}
inline int FindList::listid_size() const {
  return _internal_listid_size();
}
inline void FindList::clear_listid() {
  listid_.Clear();
}
inline int32_t FindList::_internal_listid(int index) const {
  return listid_.Get(index);
}
inline int32_t FindList::listid(int index) const {
  // @@protoc_insertion_point(field_get:PB.Client_Server.FindList.listId)
  return _internal_listid(index);
}
inline void FindList::set_listid(int index, int32_t value) {
  listid_.Set(index, value);
  // @@protoc_insertion_point(field_set:PB.Client_Server.FindList.listId)
}
inline void FindList::_internal_add_listid(int32_t value) {
  listid_.Add(value);
}
inline void FindList::add_listid(int32_t value) {
  _internal_add_listid(value);
  // @@protoc_insertion_point(field_add:PB.Client_Server.FindList.listId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FindList::_internal_listid() const {
  return listid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
FindList::listid() const {
  // @@protoc_insertion_point(field_list:PB.Client_Server.FindList.listId)
  return _internal_listid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FindList::_internal_mutable_listid() {
  return &listid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
FindList::mutable_listid() {
  // @@protoc_insertion_point(field_mutable_list:PB.Client_Server.FindList.listId)
  return _internal_mutable_listid();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Client_Server
}  // namespace PB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PB::Client_Server::Login_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::Client_Server::Login_MsgId>() {
  return ::PB::Client_Server::Login_MsgId_descriptor();
}
template <> struct is_proto_enum< ::PB::Client_Server::Logout_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::Client_Server::Logout_MsgId>() {
  return ::PB::Client_Server::Logout_MsgId_descriptor();
}
template <> struct is_proto_enum< ::PB::Client_Server::FindAll_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::Client_Server::FindAll_MsgId>() {
  return ::PB::Client_Server::FindAll_MsgId_descriptor();
}
template <> struct is_proto_enum< ::PB::Client_Server::FindList_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB::Client_Server::FindList_MsgId>() {
  return ::PB::Client_Server::FindList_MsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fserver_2eproto
