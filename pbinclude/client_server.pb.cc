// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_server.proto

#include "client_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PB {
namespace Client_Server {
constexpr Login::Login(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LoginDefaultTypeInternal {
  constexpr LoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginDefaultTypeInternal() {}
  union {
    Login _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginDefaultTypeInternal _Login_default_instance_;
constexpr Logout::Logout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(0){}
struct LogoutDefaultTypeInternal {
  constexpr LogoutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogoutDefaultTypeInternal() {}
  union {
    Logout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogoutDefaultTypeInternal _Logout_default_instance_;
constexpr FindAll::FindAll(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(0){}
struct FindAllDefaultTypeInternal {
  constexpr FindAllDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindAllDefaultTypeInternal() {}
  union {
    FindAll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindAllDefaultTypeInternal _FindAll_default_instance_;
constexpr FindList::FindList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : listid_()
  , _listid_cached_byte_size_(0)
  , token_(0){}
struct FindListDefaultTypeInternal {
  constexpr FindListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindListDefaultTypeInternal() {}
  union {
    FindList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindListDefaultTypeInternal _FindList_default_instance_;
constexpr SitDown::SitDown(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(0)
  , tableid_(0)
  , tablesit_(0){}
struct SitDownDefaultTypeInternal {
  constexpr SitDownDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SitDownDefaultTypeInternal() {}
  union {
    SitDown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SitDownDefaultTypeInternal _SitDown_default_instance_;
constexpr Ready::Ready(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(0)
  , tableid_(0)
  , tablesit_(0){}
struct ReadyDefaultTypeInternal {
  constexpr ReadyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadyDefaultTypeInternal() {}
  union {
    Ready _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadyDefaultTypeInternal _Ready_default_instance_;
}  // namespace Client_Server
}  // namespace PB
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_5fserver_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_client_5fserver_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_5fserver_2eproto = nullptr;

const uint32_t TableStruct_client_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::Login, uname_),
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::Login, pwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::Logout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::Logout, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::FindAll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::FindAll, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::FindList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::FindList, token_),
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::FindList, listid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::SitDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::SitDown, token_),
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::SitDown, tableid_),
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::SitDown, tablesit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::Ready, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::Ready, token_),
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::Ready, tableid_),
  PROTOBUF_FIELD_OFFSET(::PB::Client_Server::Ready, tablesit_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PB::Client_Server::Login)},
  { 8, -1, -1, sizeof(::PB::Client_Server::Logout)},
  { 15, -1, -1, sizeof(::PB::Client_Server::FindAll)},
  { 22, -1, -1, sizeof(::PB::Client_Server::FindList)},
  { 30, -1, -1, sizeof(::PB::Client_Server::SitDown)},
  { 39, -1, -1, sizeof(::PB::Client_Server::Ready)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PB::Client_Server::_Login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PB::Client_Server::_Logout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PB::Client_Server::_FindAll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PB::Client_Server::_FindList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PB::Client_Server::_SitDown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PB::Client_Server::_Ready_default_instance_),
};

const char descriptor_table_protodef_client_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023client_server.proto\022\020PB.Client_Server\""
  "C\n\005Login\022\r\n\005uname\030\001 \001(\t\022\013\n\003pwd\030\002 \001(\t\"\036\n\005"
  "MsgId\022\n\n\006PROTO3\020\000\022\t\n\002Id\020\241\313\230\001\"7\n\006Logout\022\r"
  "\n\005token\030\001 \001(\005\"\036\n\005MsgId\022\n\n\006PROTO3\020\000\022\t\n\002Id"
  "\020\242\313\230\001\"8\n\007FindAll\022\r\n\005token\030\001 \001(\005\"\036\n\005MsgId"
  "\022\n\n\006PROTO3\020\000\022\t\n\002Id\020\243\313\230\001\"I\n\010FindList\022\r\n\005t"
  "oken\030\001 \001(\005\022\016\n\006listId\030\002 \003(\005\"\036\n\005MsgId\022\n\n\006P"
  "ROTO3\020\000\022\t\n\002Id\020\244\313\230\001\"[\n\007SitDown\022\r\n\005token\030\001"
  " \001(\005\022\017\n\007tableId\030\002 \001(\005\022\020\n\010tableSit\030\003 \001(\005\""
  "\036\n\005MsgId\022\n\n\006PROTO3\020\000\022\t\n\002Id\020\252\313\230\001\"Y\n\005Ready"
  "\022\r\n\005token\030\001 \001(\005\022\017\n\007tableId\030\002 \001(\005\022\020\n\010tabl"
  "eSit\030\003 \001(\005\"\036\n\005MsgId\022\n\n\006PROTO3\020\000\022\t\n\002Id\020\253\313"
  "\230\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_5fserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fserver_2eproto = {
  false, false, 490, descriptor_table_protodef_client_5fserver_2eproto, "client_server.proto", 
  &descriptor_table_client_5fserver_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_client_5fserver_2eproto::offsets,
  file_level_metadata_client_5fserver_2eproto, file_level_enum_descriptors_client_5fserver_2eproto, file_level_service_descriptors_client_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_client_5fserver_2eproto_getter() {
  return &descriptor_table_client_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_client_5fserver_2eproto(&descriptor_table_client_5fserver_2eproto);
namespace PB {
namespace Client_Server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Login_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fserver_2eproto);
  return file_level_enum_descriptors_client_5fserver_2eproto[0];
}
bool Login_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 2500001:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Login_MsgId Login::PROTO3;
constexpr Login_MsgId Login::Id;
constexpr Login_MsgId Login::MsgId_MIN;
constexpr Login_MsgId Login::MsgId_MAX;
constexpr int Login::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Logout_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fserver_2eproto);
  return file_level_enum_descriptors_client_5fserver_2eproto[1];
}
bool Logout_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 2500002:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Logout_MsgId Logout::PROTO3;
constexpr Logout_MsgId Logout::Id;
constexpr Logout_MsgId Logout::MsgId_MIN;
constexpr Logout_MsgId Logout::MsgId_MAX;
constexpr int Logout::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FindAll_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fserver_2eproto);
  return file_level_enum_descriptors_client_5fserver_2eproto[2];
}
bool FindAll_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 2500003:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FindAll_MsgId FindAll::PROTO3;
constexpr FindAll_MsgId FindAll::Id;
constexpr FindAll_MsgId FindAll::MsgId_MIN;
constexpr FindAll_MsgId FindAll::MsgId_MAX;
constexpr int FindAll::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FindList_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fserver_2eproto);
  return file_level_enum_descriptors_client_5fserver_2eproto[3];
}
bool FindList_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 2500004:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FindList_MsgId FindList::PROTO3;
constexpr FindList_MsgId FindList::Id;
constexpr FindList_MsgId FindList::MsgId_MIN;
constexpr FindList_MsgId FindList::MsgId_MAX;
constexpr int FindList::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SitDown_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fserver_2eproto);
  return file_level_enum_descriptors_client_5fserver_2eproto[4];
}
bool SitDown_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 2500010:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SitDown_MsgId SitDown::PROTO3;
constexpr SitDown_MsgId SitDown::Id;
constexpr SitDown_MsgId SitDown::MsgId_MIN;
constexpr SitDown_MsgId SitDown::MsgId_MAX;
constexpr int SitDown::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ready_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fserver_2eproto);
  return file_level_enum_descriptors_client_5fserver_2eproto[5];
}
bool Ready_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 2500011:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Ready_MsgId Ready::PROTO3;
constexpr Ready_MsgId Ready::Id;
constexpr Ready_MsgId Ready::MsgId_MIN;
constexpr Ready_MsgId Ready::MsgId_MAX;
constexpr int Ready::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Login::_Internal {
 public:
};

Login::Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PB.Client_Server.Login)
}
Login::Login(const Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uname().empty()) {
    uname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uname(), 
      GetArenaForAllocation());
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pwd().empty()) {
    pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pwd(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PB.Client_Server.Login)
}

inline void Login::SharedCtor() {
uname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:PB.Client_Server.Login)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Login::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Login::ArenaDtor(void* object) {
  Login* _this = reinterpret_cast< Login* >(object);
  (void)_this;
}
void Login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:PB.Client_Server.Login)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uname_.ClearToEmpty();
  pwd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PB.Client_Server.Login.uname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PB.Client_Server.Login.pwd"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Login::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB.Client_Server.Login)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uname = 1;
  if (!this->_internal_uname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uname().data(), static_cast<int>(this->_internal_uname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PB.Client_Server.Login.uname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uname(), target);
  }

  // string pwd = 2;
  if (!this->_internal_pwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PB.Client_Server.Login.pwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB.Client_Server.Login)
  return target;
}

size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB.Client_Server.Login)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uname = 1;
  if (!this->_internal_uname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uname());
  }

  // string pwd = 2;
  if (!this->_internal_pwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Login::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Login::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Login::GetClassData() const { return &_class_data_; }

void Login::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Login *>(to)->MergeFrom(
      static_cast<const Login &>(from));
}


void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB.Client_Server.Login)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uname().empty()) {
    _internal_set_uname(from._internal_uname());
  }
  if (!from._internal_pwd().empty()) {
    _internal_set_pwd(from._internal_pwd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB.Client_Server.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  return true;
}

void Login::InternalSwap(Login* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uname_, lhs_arena,
      &other->uname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pwd_, lhs_arena,
      &other->pwd_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Login::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fserver_2eproto_getter, &descriptor_table_client_5fserver_2eproto_once,
      file_level_metadata_client_5fserver_2eproto[0]);
}

// ===================================================================

class Logout::_Internal {
 public:
};

Logout::Logout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PB.Client_Server.Logout)
}
Logout::Logout(const Logout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_ = from.token_;
  // @@protoc_insertion_point(copy_constructor:PB.Client_Server.Logout)
}

inline void Logout::SharedCtor() {
token_ = 0;
}

Logout::~Logout() {
  // @@protoc_insertion_point(destructor:PB.Client_Server.Logout)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Logout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Logout::ArenaDtor(void* object) {
  Logout* _this = reinterpret_cast< Logout* >(object);
  (void)_this;
}
void Logout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Logout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Logout::Clear() {
// @@protoc_insertion_point(message_clear_start:PB.Client_Server.Logout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Logout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Logout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB.Client_Server.Logout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 token = 1;
  if (this->_internal_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB.Client_Server.Logout)
  return target;
}

size_t Logout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB.Client_Server.Logout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 token = 1;
  if (this->_internal_token() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Logout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Logout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Logout::GetClassData() const { return &_class_data_; }

void Logout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Logout *>(to)->MergeFrom(
      static_cast<const Logout &>(from));
}


void Logout::MergeFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB.Client_Server.Logout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_token() != 0) {
    _internal_set_token(from._internal_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Logout::CopyFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB.Client_Server.Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logout::IsInitialized() const {
  return true;
}

void Logout::InternalSwap(Logout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(token_, other->token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Logout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fserver_2eproto_getter, &descriptor_table_client_5fserver_2eproto_once,
      file_level_metadata_client_5fserver_2eproto[1]);
}

// ===================================================================

class FindAll::_Internal {
 public:
};

FindAll::FindAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PB.Client_Server.FindAll)
}
FindAll::FindAll(const FindAll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_ = from.token_;
  // @@protoc_insertion_point(copy_constructor:PB.Client_Server.FindAll)
}

inline void FindAll::SharedCtor() {
token_ = 0;
}

FindAll::~FindAll() {
  // @@protoc_insertion_point(destructor:PB.Client_Server.FindAll)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindAll::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FindAll::ArenaDtor(void* object) {
  FindAll* _this = reinterpret_cast< FindAll* >(object);
  (void)_this;
}
void FindAll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindAll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindAll::Clear() {
// @@protoc_insertion_point(message_clear_start:PB.Client_Server.FindAll)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindAll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindAll::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB.Client_Server.FindAll)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 token = 1;
  if (this->_internal_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB.Client_Server.FindAll)
  return target;
}

size_t FindAll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB.Client_Server.FindAll)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 token = 1;
  if (this->_internal_token() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindAll::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindAll::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindAll::GetClassData() const { return &_class_data_; }

void FindAll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindAll *>(to)->MergeFrom(
      static_cast<const FindAll &>(from));
}


void FindAll::MergeFrom(const FindAll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB.Client_Server.FindAll)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_token() != 0) {
    _internal_set_token(from._internal_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindAll::CopyFrom(const FindAll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB.Client_Server.FindAll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindAll::IsInitialized() const {
  return true;
}

void FindAll::InternalSwap(FindAll* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(token_, other->token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindAll::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fserver_2eproto_getter, &descriptor_table_client_5fserver_2eproto_once,
      file_level_metadata_client_5fserver_2eproto[2]);
}

// ===================================================================

class FindList::_Internal {
 public:
};

FindList::FindList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  listid_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PB.Client_Server.FindList)
}
FindList::FindList(const FindList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      listid_(from.listid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_ = from.token_;
  // @@protoc_insertion_point(copy_constructor:PB.Client_Server.FindList)
}

inline void FindList::SharedCtor() {
token_ = 0;
}

FindList::~FindList() {
  // @@protoc_insertion_point(destructor:PB.Client_Server.FindList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FindList::ArenaDtor(void* object) {
  FindList* _this = reinterpret_cast< FindList* >(object);
  (void)_this;
}
void FindList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindList::Clear() {
// @@protoc_insertion_point(message_clear_start:PB.Client_Server.FindList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  listid_.Clear();
  token_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 listId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_listid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_listid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB.Client_Server.FindList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 token = 1;
  if (this->_internal_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_token(), target);
  }

  // repeated int32 listId = 2;
  {
    int byte_size = _listid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_listid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB.Client_Server.FindList)
  return target;
}

size_t FindList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB.Client_Server.FindList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 listId = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->listid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _listid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 token = 1;
  if (this->_internal_token() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindList::GetClassData() const { return &_class_data_; }

void FindList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindList *>(to)->MergeFrom(
      static_cast<const FindList &>(from));
}


void FindList::MergeFrom(const FindList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB.Client_Server.FindList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  listid_.MergeFrom(from.listid_);
  if (from._internal_token() != 0) {
    _internal_set_token(from._internal_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindList::CopyFrom(const FindList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB.Client_Server.FindList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindList::IsInitialized() const {
  return true;
}

void FindList::InternalSwap(FindList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  listid_.InternalSwap(&other->listid_);
  swap(token_, other->token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fserver_2eproto_getter, &descriptor_table_client_5fserver_2eproto_once,
      file_level_metadata_client_5fserver_2eproto[3]);
}

// ===================================================================

class SitDown::_Internal {
 public:
};

SitDown::SitDown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PB.Client_Server.SitDown)
}
SitDown::SitDown(const SitDown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&token_, &from.token_,
    static_cast<size_t>(reinterpret_cast<char*>(&tablesit_) -
    reinterpret_cast<char*>(&token_)) + sizeof(tablesit_));
  // @@protoc_insertion_point(copy_constructor:PB.Client_Server.SitDown)
}

inline void SitDown::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tablesit_) -
    reinterpret_cast<char*>(&token_)) + sizeof(tablesit_));
}

SitDown::~SitDown() {
  // @@protoc_insertion_point(destructor:PB.Client_Server.SitDown)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SitDown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SitDown::ArenaDtor(void* object) {
  SitDown* _this = reinterpret_cast< SitDown* >(object);
  (void)_this;
}
void SitDown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SitDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SitDown::Clear() {
// @@protoc_insertion_point(message_clear_start:PB.Client_Server.SitDown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tablesit_) -
      reinterpret_cast<char*>(&token_)) + sizeof(tablesit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SitDown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tableId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tableSit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          tablesit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SitDown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB.Client_Server.SitDown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 token = 1;
  if (this->_internal_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_token(), target);
  }

  // int32 tableId = 2;
  if (this->_internal_tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tableid(), target);
  }

  // int32 tableSit = 3;
  if (this->_internal_tablesit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tablesit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB.Client_Server.SitDown)
  return target;
}

size_t SitDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB.Client_Server.SitDown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 token = 1;
  if (this->_internal_token() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_token());
  }

  // int32 tableId = 2;
  if (this->_internal_tableid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tableid());
  }

  // int32 tableSit = 3;
  if (this->_internal_tablesit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tablesit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SitDown::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SitDown::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SitDown::GetClassData() const { return &_class_data_; }

void SitDown::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SitDown *>(to)->MergeFrom(
      static_cast<const SitDown &>(from));
}


void SitDown::MergeFrom(const SitDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB.Client_Server.SitDown)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_token() != 0) {
    _internal_set_token(from._internal_token());
  }
  if (from._internal_tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  if (from._internal_tablesit() != 0) {
    _internal_set_tablesit(from._internal_tablesit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SitDown::CopyFrom(const SitDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB.Client_Server.SitDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SitDown::IsInitialized() const {
  return true;
}

void SitDown::InternalSwap(SitDown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SitDown, tablesit_)
      + sizeof(SitDown::tablesit_)
      - PROTOBUF_FIELD_OFFSET(SitDown, token_)>(
          reinterpret_cast<char*>(&token_),
          reinterpret_cast<char*>(&other->token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SitDown::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fserver_2eproto_getter, &descriptor_table_client_5fserver_2eproto_once,
      file_level_metadata_client_5fserver_2eproto[4]);
}

// ===================================================================

class Ready::_Internal {
 public:
};

Ready::Ready(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PB.Client_Server.Ready)
}
Ready::Ready(const Ready& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&token_, &from.token_,
    static_cast<size_t>(reinterpret_cast<char*>(&tablesit_) -
    reinterpret_cast<char*>(&token_)) + sizeof(tablesit_));
  // @@protoc_insertion_point(copy_constructor:PB.Client_Server.Ready)
}

inline void Ready::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tablesit_) -
    reinterpret_cast<char*>(&token_)) + sizeof(tablesit_));
}

Ready::~Ready() {
  // @@protoc_insertion_point(destructor:PB.Client_Server.Ready)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Ready::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ready::ArenaDtor(void* object) {
  Ready* _this = reinterpret_cast< Ready* >(object);
  (void)_this;
}
void Ready::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ready::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ready::Clear() {
// @@protoc_insertion_point(message_clear_start:PB.Client_Server.Ready)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tablesit_) -
      reinterpret_cast<char*>(&token_)) + sizeof(tablesit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ready::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tableId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tableSit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          tablesit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ready::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PB.Client_Server.Ready)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 token = 1;
  if (this->_internal_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_token(), target);
  }

  // int32 tableId = 2;
  if (this->_internal_tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tableid(), target);
  }

  // int32 tableSit = 3;
  if (this->_internal_tablesit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tablesit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PB.Client_Server.Ready)
  return target;
}

size_t Ready::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PB.Client_Server.Ready)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 token = 1;
  if (this->_internal_token() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_token());
  }

  // int32 tableId = 2;
  if (this->_internal_tableid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tableid());
  }

  // int32 tableSit = 3;
  if (this->_internal_tablesit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tablesit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ready::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ready::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ready::GetClassData() const { return &_class_data_; }

void Ready::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ready *>(to)->MergeFrom(
      static_cast<const Ready &>(from));
}


void Ready::MergeFrom(const Ready& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PB.Client_Server.Ready)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_token() != 0) {
    _internal_set_token(from._internal_token());
  }
  if (from._internal_tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  if (from._internal_tablesit() != 0) {
    _internal_set_tablesit(from._internal_tablesit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ready::CopyFrom(const Ready& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PB.Client_Server.Ready)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ready::IsInitialized() const {
  return true;
}

void Ready::InternalSwap(Ready* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ready, tablesit_)
      + sizeof(Ready::tablesit_)
      - PROTOBUF_FIELD_OFFSET(Ready, token_)>(
          reinterpret_cast<char*>(&token_),
          reinterpret_cast<char*>(&other->token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ready::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_5fserver_2eproto_getter, &descriptor_table_client_5fserver_2eproto_once,
      file_level_metadata_client_5fserver_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Client_Server
}  // namespace PB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PB::Client_Server::Login* Arena::CreateMaybeMessage< ::PB::Client_Server::Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB::Client_Server::Login >(arena);
}
template<> PROTOBUF_NOINLINE ::PB::Client_Server::Logout* Arena::CreateMaybeMessage< ::PB::Client_Server::Logout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB::Client_Server::Logout >(arena);
}
template<> PROTOBUF_NOINLINE ::PB::Client_Server::FindAll* Arena::CreateMaybeMessage< ::PB::Client_Server::FindAll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB::Client_Server::FindAll >(arena);
}
template<> PROTOBUF_NOINLINE ::PB::Client_Server::FindList* Arena::CreateMaybeMessage< ::PB::Client_Server::FindList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB::Client_Server::FindList >(arena);
}
template<> PROTOBUF_NOINLINE ::PB::Client_Server::SitDown* Arena::CreateMaybeMessage< ::PB::Client_Server::SitDown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB::Client_Server::SitDown >(arena);
}
template<> PROTOBUF_NOINLINE ::PB::Client_Server::Ready* Arena::CreateMaybeMessage< ::PB::Client_Server::Ready >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PB::Client_Server::Ready >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
